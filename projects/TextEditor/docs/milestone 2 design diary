Milestone 2 was much more challenging than milestone 1 for me. The majority of milestone 1 was about familiarizing myself with the curses 
library and creating a solid platform for the future of the project in which I could build upon.  This idea of how to plan for the future 
of the program when you donâ€™t know what the future will look like has been the most time-consuming part of this milestone. In milestone 1 
the only impactful decision I made was segmenting my screen into multiple windows to avoid awkward overlap issues. However, during 
milestone 2, every time I am working on implementing a new functionality it is inevitable that I end up worried about if it will interface 
well in future iterations of the program. This being the first program I am designing; I feel my implementation of functionalities is 
incredibly shortsighted. I do not have the experience of what makes programs interface well with themselves, and so, I am blindly adding 
one functionality after another; sticking them together hoping the amalgamation does what I want it to. I think this will be the greatest 
challenge of the project, but also what I gain the most knowledge of. By the end of this, I hope I will be able to think about my programs 
with more of a macro lens. Instead of focusing on one functionality and then the next, I want to be able to see the big picture so I can 
more adequately design each functionality for the future.

My first iteration of reading from a file used a vector of strings. I would fill the vector from the file with getline, and output it line 
by line letting curses do the work of word wrapping. I ended up switching to a vector of chars and reading input from the file character 
by character. This helps give me more control over exactly how I output the file in my window; instead of outputting line by line, I can 
choose where I want the text to wrap. The main reason I switched to a vector of chars is because I believe it will be much easier to 
operate on for future milestones when I need to alter the text and write it back to the file.

gif

![](Texteditgif.gif)
